import backprop_dataimport pandas as pdimport skeleton_backprop_networkfrom matplotlib import pyplot as pltimport pandas as pdimport numpy as npdef q_a():    training_data, test_data = backprop_data.load(train_size=10000,test_size=5000)    net = skeleton_backprop_network.Network([784, 40, 10])    net.SGD(training_data, epochs=30, mini_batch_size=10, learning_rate=0.1, test_data=test_data)def q_b():    training_data, test_data = backprop_data.load(train_size=10000, test_size=5000)    eta = [0.001, 0.01, 0.1, 1, 10, 100]    train_accuracy = [None for _ in range(6)]    train_loss = [None for _ in range(6)]    test_accuracy = [None for _ in range(6)]    for i in range(6):        print(f"Starts eta: {eta[i]}")        net = skeleton_backprop_network.Network([784, 40, 10])        train_accuracy[i], train_loss[i], test_accuracy[i] = net.SGD(training_data, epochs=30, mini_batch_size=10,                                                                     learning_rate=eta[i], test_data=test_data)    for i in range(6):        plt.plot(np.arange(30), train_accuracy[i], label="rate = {}".format(eta[i]))    plt.xlabel('epochs')    plt.ylabel('Train Accuracy')    plt.legend()    plt.show()    for i in range(6):        plt.plot(np.arange(30), train_loss[i], label="rate = {}".format(eta[i]))    plt.xlabel('epochs')    plt.ylabel('Train Loss')    plt.legend()    plt.show()    for i in range(6):        plt.plot(np.arange(30), test_accuracy[i], label="rate = {}".format(eta[i]))    plt.xlabel('epochs')    plt.ylabel('Test Accuracy')    plt.legend()    plt.show()def q_c():    training_data, test_data = backprop_data.load(train_size=50000, test_size=10000)    net = skeleton_backprop_network.Network([784, 40, 10])    net.SGD(training_data, epochs=30, mini_batch_size=10, learning_rate=0.10, test_data=test_data)    print()def q_d():    """    For running One should modify the SGD function in backprop to return    only the LAST accuracy    """    training_data, test_data = backprop_data.load(train_size=10000,test_size=5000)    eta = [0.1, 0.2]    structure = [[784,10]]+[[784,i,10] for i in range(28,46,2)] + [[784,i,10] for i in range(60,84,2)]    mem = {"structure": [], "eta": [], "test_accuracy": []}    for s in structure:        print(f"Structure: {s}")        for e in eta:            mem["structure"].append(s)            mem["eta"].append(e)            net = skeleton_backprop_network.Network(s)            train_accuracy, train_loss, test_accuracy = net.SGD(training_data, epochs=30, mini_batch_size=10,                                                                         learning_rate=e, test_data=test_data)            mem["test_accuracy"].append(test_accuracy)        print()    df = pd.DataFrame(mem)    print(df)if __name__=="__main__":    q_a()    # q_b()    # q_c()    # q_d()